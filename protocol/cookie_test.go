package protocol

import (
	"encoding/base64"
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test_StamperMac1(t *testing.T) {
	must := Must(base64.StdEncoding.DecodeString("doQkpj/AjVrfbTFENyj46kzYWNDdrXulSfxBdnmslCo="))
	var stamper Stamper
	stamper.Init(PublicKey(must))

	var checker Checker
	checker.Init(PublicKey(must))

	data := []byte{
		0x02, 0x00, 0x00, 0x00, 0x1a, 0x94, 0x98, 0x2d,
		0xe0, 0x37, 0x80, 0x1e, 0xe3, 0xda, 0x66, 0x4c,
		0xb0, 0x87, 0xdb, 0x51, 0xe6, 0x76, 0x68, 0xa3,
		0xe0, 0xa1, 0xff, 0xe7, 0x03, 0x0b, 0x4a, 0x33,
		0x1f, 0x7f, 0xc1, 0x3a, 0xc6, 0x72, 0x87, 0x9d,
		0x75, 0x9b, 0x92, 0x18, 0x8b, 0x9a, 0x4d, 0x83,
		0x31, 0x45, 0x96, 0x8e, 0xeb, 0xaf, 0xc2, 0x8c,
		0x45, 0x1c, 0xab, 0x52, 0xd3, 0x57, 0xe6, 0xa2,
		0x01, 0xa0, 0x2c, 0x45, 0x22, 0xf7, 0x38, 0xa5,
		0x3e, 0x38, 0x68, 0xb4, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}
	mac2 := len(data) - CookieSize
	mac1 := mac2 - CookieSize

	test := make([]byte, len(data))
	copy(test, data)

	stamper.Stamp(test)

	assert.Equal(t, data[mac1:], test[mac1:], "Mac1 is invalid")
	assert.Equal(t, data[mac2:], test[mac2:], "Mac2 is invalid")

	assert.True(t, checker.CheckMAC1(data), "Mac1 verification failed")
}
